name: Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Build Release Artifacts
  build-artifacts:
    runs-on: ubuntu-latest
    name: Build Release Artifacts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
        pip install -r requirements.txt
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # Create GitHub Release
  github-release:
    runs-on: ubuntu-latest
    needs: build-artifacts
    name: Create GitHub Release
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        body: |
          ## Changes in this Release
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          ```bash
          pip install intel-ai-agent-framework==${{ github.event.inputs.version }}
          ```
          
          ## Docker
          ```bash
          docker pull ${{ github.repository }}:v${{ github.event.inputs.version }}
          ```
        draft: false
        prerelease: false

  # Publish to PyPI
  publish-pypi:
    runs-on: ubuntu-latest
    needs: build-artifacts
    name: Publish to PyPI
    environment: pypi
    if: github.event_name == 'release'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  # Update Documentation
  update-docs:
    runs-on: ubuntu-latest
    needs: github-release
    name: Update Documentation
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
        
    - name: Build documentation
      run: |
        mkdocs build
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  # Notify Teams
  notify:
    runs-on: ubuntu-latest
    needs: [publish-pypi, update-docs]
    name: Notify Teams
    if: always()
    
    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#releases'
        text: |
          Release ${{ github.event.release.tag_name }} has been published!
          Status: ${{ job.status }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Teams Notification
      uses: skitionek/notify-microsoft-teams@master
      if: always()
      with:
        webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
        message: |
          **Release Published**: ${{ github.event.release.tag_name }}
          **Status**: ${{ job.status }}
          **Repository**: ${{ github.repository }}
